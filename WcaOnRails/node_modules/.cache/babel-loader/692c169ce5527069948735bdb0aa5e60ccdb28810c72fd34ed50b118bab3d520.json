{"ast":null,"code":"var _excluded = [\"eventId\"];\nvar _jsxFileName = \"/app/WcaOnRails/app/webpacker/components/Results/WCALive/AttemptResultField/AttemptResultField.js\";\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React from 'react';\nimport FmField from \"./FmField\";\nimport MbldField from \"./MbldField\";\nimport TimeField from \"./TimeField\";\n\n/**\n   `AttemptResultField` is an abstraction over fields specific to the given event,\n   but each of these specific fields works in the similar way.\n\n   The idea behind an attempt result field is that it gets a `value`,\n   allows editing it in any way (by keeping a local draft value)\n   and triggers an `onChange` callback once editing is finished (a blur event).\n\n   This requires keeping both the current value in the parent component (like\n   for a controlled field) and a draft value in the field component\n   (local copy of the upstream value).\n   Whenever `value` changes we want to synchronize the local draft value,\n   which fits into the `getDerivedStateFromProps` lifecycle method.\n   The most straightforward solution would be using useEffect to keep them in sync,\n   but this performs unnecessary re-rendering with old value and leads to jumpy UI.\n   https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n   The above article describes alternatives, but none seems good enough in our case:\n   - keeping the draft value in the parent component (e.g. `ResultForm`) is a bad idea,\n   because each field type stores the draft value in different format\n   and it's just best to use the fields as isolated black boxes\n   - using the key prop is a better option, but it remounts the given input element,\n   which may lead to undesired *Tab* key behaviour\n   (clicking *Tab* blurs one input, which may affect the next input value\n   and remounting it as a consequence, in that case we lose focus)\n\n   Using getDerivedStateFromProps sounds justified in this case.\n   Hooks equivalent is described in the section below\n   https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops.\n*/\n\n/* eslint react/jsx-props-no-spreading: \"off\" */\nfunction AttemptResultField(_ref) {\n  var eventId = _ref.eventId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  if (eventId === '333fm') {\n    return /*#__PURE__*/React.createElement(FmField, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    }));\n  }\n  if (eventId === '333mbf' || eventId === '333mbo') {\n    return /*#__PURE__*/React.createElement(MbldField, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    }));\n  }\n  return /*#__PURE__*/React.createElement(TimeField, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  }));\n}\nexport default AttemptResultField;","map":{"version":3,"names":["React","FmField","MbldField","TimeField","AttemptResultField","_ref","eventId","props","_objectWithoutProperties","_excluded","createElement","Object","assign","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/app/WcaOnRails/app/webpacker/components/Results/WCALive/AttemptResultField/AttemptResultField.js"],"sourcesContent":["import React from 'react';\n\nimport FmField from './FmField';\nimport MbldField from './MbldField';\nimport TimeField from './TimeField';\n\n/**\n   `AttemptResultField` is an abstraction over fields specific to the given event,\n   but each of these specific fields works in the similar way.\n\n   The idea behind an attempt result field is that it gets a `value`,\n   allows editing it in any way (by keeping a local draft value)\n   and triggers an `onChange` callback once editing is finished (a blur event).\n\n   This requires keeping both the current value in the parent component (like\n   for a controlled field) and a draft value in the field component\n   (local copy of the upstream value).\n   Whenever `value` changes we want to synchronize the local draft value,\n   which fits into the `getDerivedStateFromProps` lifecycle method.\n   The most straightforward solution would be using useEffect to keep them in sync,\n   but this performs unnecessary re-rendering with old value and leads to jumpy UI.\n   https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n   The above article describes alternatives, but none seems good enough in our case:\n   - keeping the draft value in the parent component (e.g. `ResultForm`) is a bad idea,\n   because each field type stores the draft value in different format\n   and it's just best to use the fields as isolated black boxes\n   - using the key prop is a better option, but it remounts the given input element,\n   which may lead to undesired *Tab* key behaviour\n   (clicking *Tab* blurs one input, which may affect the next input value\n   and remounting it as a consequence, in that case we lose focus)\n\n   Using getDerivedStateFromProps sounds justified in this case.\n   Hooks equivalent is described in the section below\n   https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops.\n*/\n\n/* eslint react/jsx-props-no-spreading: \"off\" */\nfunction AttemptResultField({ eventId, ...props }) {\n  if (eventId === '333fm') {\n    return <FmField {...props} />;\n  }\n  if (eventId === '333mbf' || eventId === '333mbo') {\n    return <MbldField {...props} />;\n  }\n  return <TimeField {...props} />;\n}\n\nexport default AttemptResultField;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,OAAO;AACd,OAAOC,SAAS;AAChB,OAAOC,SAAS;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASC,kBAAkBA,CAAAC,IAAA,EAAwB;EAAA,IAArBC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAKC,KAAK,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;EAC7C,IAAIH,OAAO,KAAK,OAAO,EAAE;IACvB,oBAAON,KAAA,CAAAU,aAAA,CAACT,OAAO,EAAAU,MAAA,CAAAC,MAAA,KAAKL,KAAK;MAAAM,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAG,CAAC;EAC/B;EACA,IAAIZ,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,QAAQ,EAAE;IAChD,oBAAON,KAAA,CAAAU,aAAA,CAACR,SAAS,EAAAS,MAAA,CAAAC,MAAA,KAAKL,KAAK;MAAAM,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAG,CAAC;EACjC;EACA,oBAAOlB,KAAA,CAAAU,aAAA,CAACP,SAAS,EAAAQ,MAAA,CAAAC,MAAA,KAAKL,KAAK;IAAAM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,CAAC;AACjC;AAEA,eAAed,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}