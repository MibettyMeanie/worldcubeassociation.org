{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nexport var SKIPPED_VALUE = 0;\nexport var DNF_VALUE = -1;\nexport var DNS_VALUE = -2;\nfunction isComplete(attemptResult) {\n  return attemptResult > 0;\n}\nfunction isSkipped(attemptResult) {\n  return attemptResult === SKIPPED_VALUE;\n}\nfunction compareAttemptResults(attemptResult1, attemptResult2) {\n  if (!isComplete(attemptResult1) && !isComplete(attemptResult2)) return 0;\n  if (!isComplete(attemptResult1) && isComplete(attemptResult2)) return 1;\n  if (isComplete(attemptResult1) && !isComplete(attemptResult2)) return -1;\n  return attemptResult1 - attemptResult2;\n}\nfunction mean(x, y, z) {\n  return Math.round((x + y + z) / 3);\n}\nfunction meanOf3(attemptResults) {\n  if (!attemptResults.every(isComplete)) return DNF_VALUE;\n  return mean.apply(void 0, _toConsumableArray(attemptResults));\n}\nfunction averageOf5(attemptResults) {\n  var _attemptResults$slice = attemptResults.slice().sort(compareAttemptResults),\n    _attemptResults$slice2 = _slicedToArray(_attemptResults$slice, 4),\n    x = _attemptResults$slice2[1],\n    y = _attemptResults$slice2[2],\n    z = _attemptResults$slice2[3];\n  return meanOf3([x, y, z]);\n}\n\n/* See: https://www.worldcubeassociation.org/regulations/#9f2 */\nfunction roundOver10Mins(value) {\n  if (!isComplete(value)) return value;\n  if (value <= 10 * 6000) return value;\n  return Math.round(value / 100) * 100;\n}\n\n/**\n * Returns the best attempt result from the given list.\n *\n * @example\n * best([900, -1, 700]); // => 700\n */\nexport function best(attemptResults) {\n  var nonSkipped = attemptResults.filter(function (attempt) {\n    return !isSkipped(attempt);\n  });\n  var completeAttempts = attemptResults.filter(isComplete);\n  if (nonSkipped.length === 0) return SKIPPED_VALUE;\n  if (completeAttempts.length === 0) return Math.max.apply(Math, _toConsumableArray(nonSkipped));\n  return Math.min.apply(Math, _toConsumableArray(completeAttempts));\n}\n\n/**\n * Returns the average of the given attempt results.\n *\n * Calculates either Mean of 3 or Average of 5 depending on\n * the number of the given attempt results.\n *\n * @example\n * average([900, -1, 700, 800, 900], '333'); // => 800\n * average([900, -1, 700, 800, -1], '333'); // => -1\n */\nexport function average(attemptResults, eventId) {\n  if (!eventId) {\n    /* If eventId is omitted, the average is still calculated correctly except for FMC\n       and that may be a hard to spot bug, so better enforce explicity here. */\n    throw new Error('Missing argument: eventId');\n  }\n  if (eventId === '333mbf' || eventId === '333mbo') return SKIPPED_VALUE;\n  if (attemptResults.some(isSkipped)) return SKIPPED_VALUE;\n  if (eventId === '333fm') {\n    var scaled = attemptResults.map(function (attemptResult) {\n      return attemptResult * 100;\n    });\n    switch (attemptResults.length) {\n      case 1:\n      case 2:\n        return SKIPPED_VALUE;\n      case 3:\n        return meanOf3(scaled);\n      default:\n        throw new Error(\"Invalid number of attempt results, expected 1, 2, or 3, given \".concat(attemptResults.length, \".\"));\n    }\n  }\n  switch (attemptResults.length) {\n    case 3:\n      return roundOver10Mins(meanOf3(attemptResults));\n    case 5:\n      return roundOver10Mins(averageOf5(attemptResults));\n    default:\n      throw new Error(\"Invalid number of attempt results, expected 3 or 5, given \".concat(attemptResults.length, \".\"));\n  }\n}\n\n/**\n * Returns an object representation of the given MBLD attempt result.\n *\n * @example\n * decodeMbldAttemptResult(900348002); // => { solved: 11, attempted: 13, centiseconds: 348000 }\n */\nexport function decodeMbldAttemptResult(value) {\n  if (value <= 0) return {\n    solved: 0,\n    attempted: 0,\n    centiseconds: value\n  };\n  // Old-style results, written as a 10-digit number, start with a '1'.\n  // New-style results start with a '0'.\n  var isOldStyleResult = value.toString().padStart(10, '0').startsWith('1');\n  if (isOldStyleResult) {\n    var _seconds = value % 1e5;\n    var _attempted = Math.floor(value / 1e5) % 100;\n    var _solved = 99 - Math.floor(value / 1e7) % 100;\n    var _centiseconds = _seconds === 99999 ? null : _seconds * 100;\n    return {\n      solved: _solved,\n      attempted: _attempted,\n      centiseconds: _centiseconds\n    };\n  }\n  var missed = value % 100;\n  var seconds = Math.floor(value / 100) % 1e5;\n  var points = 99 - Math.floor(value / 1e7) % 100;\n  var solved = points + missed;\n  var attempted = solved + missed;\n  var centiseconds = seconds === 99999 ? null : seconds * 100;\n  return {\n    solved: solved,\n    attempted: attempted,\n    centiseconds: centiseconds\n  };\n}\n\n/**\n * Returns a MBLD attempt result based on the given object representation.\n *\n * @example\n * encodeMbldAttemptResult({ solved: 11, attempted: 13, centiseconds: 348000 }); // => 900348002\n */\nexport function encodeMbldAttemptResult(_ref) {\n  var solved = _ref.solved,\n    attempted = _ref.attempted,\n    centiseconds = _ref.centiseconds;\n  if (centiseconds <= 0) return centiseconds;\n  var missed = attempted - solved;\n  var points = solved - missed;\n  var seconds = Math.round((centiseconds || 9999900) / 100); /* 99999 seconds is used for unknown time. */\n  return (99 - points) * 1e7 + seconds * 1e2 + missed;\n}\n\n/**\n * Converts centiseconds to a human-friendly string.\n */\nexport function centisecondsToClockFormat(centiseconds) {\n  if (centiseconds == null) {\n    return '?:??:??';\n  }\n  if (!Number.isFinite(centiseconds)) {\n    throw new Error(\"Invalid centiseconds, expected positive number, got \".concat(centiseconds, \".\"));\n  }\n  return new Date(centiseconds * 10).toISOString().substr(11, 11).replace(/^[0:]*(?!\\.)/g, '');\n}\nfunction formatMbldAttemptResult(attemptResult) {\n  var _decodeMbldAttemptRes = decodeMbldAttemptResult(attemptResult),\n    solved = _decodeMbldAttemptRes.solved,\n    attempted = _decodeMbldAttemptRes.attempted,\n    centiseconds = _decodeMbldAttemptRes.centiseconds;\n  var clockFormat = centisecondsToClockFormat(centiseconds);\n  var shortClockFormat = clockFormat.replace(/\\.00$/, '');\n  // u2002 is a special space character\n  // using it here allows us to expand space between mbf results without\n  //  expanding the spaces within the individual results\n  // see https://github.com/thewca/worldcubeassociation.org/issues/6375\n  return \"\".concat(solved, \"/\").concat(attempted, \"\\u2002\").concat(shortClockFormat);\n}\nfunction formatFmAttemptResult(attemptResult) {\n  /* Note: FM singles are stored as the number of moves (e.g. 25),\n     while averages are stored with 2 decimal places (e.g. 2533 for an average of 25.33 moves). */\n  var isAverage = attemptResult >= 1000;\n  return isAverage ? (attemptResult / 100).toFixed(2) : attemptResult.toString();\n}\n\n/**\n * Converts the given attempt result to a human-friendly string.\n *\n * @example\n * formatAttemptResult(-1, '333'); // => 'DNF'\n * formatAttemptResult(6111, '333'); // => '1:01.11'\n * formatAttemptResult(900348002, '333mbf'); // => '11/13 58:00'\n */\nexport function formatAttemptResult(attemptResult, eventId) {\n  if (attemptResult === SKIPPED_VALUE) return '';\n  if (attemptResult === DNF_VALUE) return 'DNF';\n  if (attemptResult === DNS_VALUE) return 'DNS';\n  if (eventId === '333mbf' || eventId === '333mbo') return formatMbldAttemptResult(attemptResult);\n  if (eventId === '333fm') return formatFmAttemptResult(attemptResult);\n  return centisecondsToClockFormat(attemptResult);\n}\nexport function formatAttemptsForResult(result, eventId) {\n  // Only highlight best and worst if the number of unskipped attempts is 5.\n  var highlightBestAndWorst = result.attempts.filter(function (a) {\n    return a !== 0;\n  }).length === 5;\n  return result.attempts.map(function (attempt, index) {\n    var attemptStr = formatAttemptResult(attempt, eventId);\n    return highlightBestAndWorst && (result.best_index === index || result.worst_index === index) ? \"(\".concat(attemptStr, \")\") : attemptStr;\n  }).join(' ');\n}","map":{"version":3,"names":["SKIPPED_VALUE","DNF_VALUE","DNS_VALUE","isComplete","attemptResult","isSkipped","compareAttemptResults","attemptResult1","attemptResult2","mean","x","y","z","Math","round","meanOf3","attemptResults","every","apply","_toConsumableArray","averageOf5","_attemptResults$slice","slice","sort","_attemptResults$slice2","_slicedToArray","roundOver10Mins","value","best","nonSkipped","filter","attempt","completeAttempts","length","max","min","average","eventId","Error","some","scaled","map","concat","decodeMbldAttemptResult","solved","attempted","centiseconds","isOldStyleResult","toString","padStart","startsWith","seconds","floor","missed","points","encodeMbldAttemptResult","_ref","centisecondsToClockFormat","Number","isFinite","Date","toISOString","substr","replace","formatMbldAttemptResult","_decodeMbldAttemptRes","clockFormat","shortClockFormat","formatFmAttemptResult","isAverage","toFixed","formatAttemptResult","formatAttemptsForResult","result","highlightBestAndWorst","attempts","a","index","attemptStr","best_index","worst_index","join"],"sources":["/app/WcaOnRails/app/webpacker/lib/wca-live/attempts.js"],"sourcesContent":["export const SKIPPED_VALUE = 0;\nexport const DNF_VALUE = -1;\nexport const DNS_VALUE = -2;\n\nfunction isComplete(attemptResult) {\n  return attemptResult > 0;\n}\n\nfunction isSkipped(attemptResult) {\n  return attemptResult === SKIPPED_VALUE;\n}\n\nfunction compareAttemptResults(attemptResult1, attemptResult2) {\n  if (!isComplete(attemptResult1) && !isComplete(attemptResult2)) return 0;\n  if (!isComplete(attemptResult1) && isComplete(attemptResult2)) return 1;\n  if (isComplete(attemptResult1) && !isComplete(attemptResult2)) return -1;\n  return attemptResult1 - attemptResult2;\n}\n\nfunction mean(x, y, z) {\n  return Math.round((x + y + z) / 3);\n}\n\nfunction meanOf3(attemptResults) {\n  if (!attemptResults.every(isComplete)) return DNF_VALUE;\n  return mean(...attemptResults);\n}\n\nfunction averageOf5(attemptResults) {\n  const [, x, y, z] = attemptResults.slice().sort(compareAttemptResults);\n  return meanOf3([x, y, z]);\n}\n\n/* See: https://www.worldcubeassociation.org/regulations/#9f2 */\nfunction roundOver10Mins(value) {\n  if (!isComplete(value)) return value;\n  if (value <= 10 * 6000) return value;\n  return Math.round(value / 100) * 100;\n}\n\n/**\n * Returns the best attempt result from the given list.\n *\n * @example\n * best([900, -1, 700]); // => 700\n */\nexport function best(attemptResults) {\n  const nonSkipped = attemptResults.filter((attempt) => !isSkipped(attempt));\n  const completeAttempts = attemptResults.filter(isComplete);\n\n  if (nonSkipped.length === 0) return SKIPPED_VALUE;\n  if (completeAttempts.length === 0) return Math.max(...nonSkipped);\n  return Math.min(...completeAttempts);\n}\n\n/**\n * Returns the average of the given attempt results.\n *\n * Calculates either Mean of 3 or Average of 5 depending on\n * the number of the given attempt results.\n *\n * @example\n * average([900, -1, 700, 800, 900], '333'); // => 800\n * average([900, -1, 700, 800, -1], '333'); // => -1\n */\nexport function average(attemptResults, eventId) {\n  if (!eventId) {\n    /* If eventId is omitted, the average is still calculated correctly except for FMC\n       and that may be a hard to spot bug, so better enforce explicity here. */\n    throw new Error('Missing argument: eventId');\n  }\n\n  if (eventId === '333mbf' || eventId === '333mbo') return SKIPPED_VALUE;\n\n  if (attemptResults.some(isSkipped)) return SKIPPED_VALUE;\n\n  if (eventId === '333fm') {\n    const scaled = attemptResults.map((attemptResult) => attemptResult * 100);\n    switch (attemptResults.length) {\n      case 1:\n      case 2:\n        return SKIPPED_VALUE;\n      case 3:\n        return meanOf3(scaled);\n      default:\n        throw new Error(\n          `Invalid number of attempt results, expected 1, 2, or 3, given ${attemptResults.length}.`,\n        );\n    }\n  }\n\n  switch (attemptResults.length) {\n    case 3:\n      return roundOver10Mins(meanOf3(attemptResults));\n    case 5:\n      return roundOver10Mins(averageOf5(attemptResults));\n    default:\n      throw new Error(\n        `Invalid number of attempt results, expected 3 or 5, given ${attemptResults.length}.`,\n      );\n  }\n}\n\n/**\n * Returns an object representation of the given MBLD attempt result.\n *\n * @example\n * decodeMbldAttemptResult(900348002); // => { solved: 11, attempted: 13, centiseconds: 348000 }\n */\nexport function decodeMbldAttemptResult(value) {\n  if (value <= 0) return { solved: 0, attempted: 0, centiseconds: value };\n  // Old-style results, written as a 10-digit number, start with a '1'.\n  // New-style results start with a '0'.\n  const isOldStyleResult = value.toString().padStart(10, '0').startsWith('1');\n  if (isOldStyleResult) {\n    const seconds = value % 1e5;\n    const attempted = Math.floor(value / 1e5) % 100;\n    const solved = 99 - (Math.floor(value / 1e7) % 100);\n    const centiseconds = seconds === 99999 ? null : seconds * 100;\n    return { solved, attempted, centiseconds };\n  }\n  const missed = value % 100;\n  const seconds = Math.floor(value / 100) % 1e5;\n  const points = 99 - (Math.floor(value / 1e7) % 100);\n  const solved = points + missed;\n  const attempted = solved + missed;\n  const centiseconds = seconds === 99999 ? null : seconds * 100;\n  return { solved, attempted, centiseconds };\n}\n\n/**\n * Returns a MBLD attempt result based on the given object representation.\n *\n * @example\n * encodeMbldAttemptResult({ solved: 11, attempted: 13, centiseconds: 348000 }); // => 900348002\n */\nexport function encodeMbldAttemptResult({ solved, attempted, centiseconds }) {\n  if (centiseconds <= 0) return centiseconds;\n  const missed = attempted - solved;\n  const points = solved - missed;\n  const seconds = Math.round(\n    (centiseconds || 9999900) / 100,\n  ); /* 99999 seconds is used for unknown time. */\n  return (99 - points) * 1e7 + seconds * 1e2 + missed;\n}\n\n/**\n * Converts centiseconds to a human-friendly string.\n */\nexport function centisecondsToClockFormat(centiseconds) {\n  if (centiseconds == null) {\n    return '?:??:??';\n  }\n  if (!Number.isFinite(centiseconds)) {\n    throw new Error(\n      `Invalid centiseconds, expected positive number, got ${centiseconds}.`,\n    );\n  }\n  return new Date(centiseconds * 10)\n    .toISOString()\n    .substr(11, 11)\n    .replace(/^[0:]*(?!\\.)/g, '');\n}\n\nfunction formatMbldAttemptResult(attemptResult) {\n  const { solved, attempted, centiseconds } = decodeMbldAttemptResult(\n    attemptResult,\n  );\n  const clockFormat = centisecondsToClockFormat(centiseconds);\n  const shortClockFormat = clockFormat.replace(/\\.00$/, '');\n  // u2002 is a special space character\n  // using it here allows us to expand space between mbf results without\n  //  expanding the spaces within the individual results\n  // see https://github.com/thewca/worldcubeassociation.org/issues/6375\n  return `${solved}/${attempted}\\u2002${shortClockFormat}`;\n}\n\nfunction formatFmAttemptResult(attemptResult) {\n  /* Note: FM singles are stored as the number of moves (e.g. 25),\n     while averages are stored with 2 decimal places (e.g. 2533 for an average of 25.33 moves). */\n  const isAverage = attemptResult >= 1000;\n  return isAverage\n    ? (attemptResult / 100).toFixed(2)\n    : attemptResult.toString();\n}\n\n/**\n * Converts the given attempt result to a human-friendly string.\n *\n * @example\n * formatAttemptResult(-1, '333'); // => 'DNF'\n * formatAttemptResult(6111, '333'); // => '1:01.11'\n * formatAttemptResult(900348002, '333mbf'); // => '11/13 58:00'\n */\nexport function formatAttemptResult(attemptResult, eventId) {\n  if (attemptResult === SKIPPED_VALUE) return '';\n  if (attemptResult === DNF_VALUE) return 'DNF';\n  if (attemptResult === DNS_VALUE) return 'DNS';\n  if (eventId === '333mbf' || eventId === '333mbo') return formatMbldAttemptResult(attemptResult);\n  if (eventId === '333fm') return formatFmAttemptResult(attemptResult);\n  return centisecondsToClockFormat(attemptResult);\n}\n\nexport function formatAttemptsForResult(result, eventId) {\n  // Only highlight best and worst if the number of unskipped attempts is 5.\n  const highlightBestAndWorst = result.attempts.filter((a) => a !== 0).length === 5;\n  return result.attempts.map((attempt, index) => {\n    const attemptStr = formatAttemptResult(attempt, eventId);\n    return highlightBestAndWorst && (result.best_index === index || result.worst_index === index)\n      ? `(${attemptStr})` : attemptStr;\n  }).join(' ');\n}\n"],"mappings":";;;;;;;;;;AAAA,OAAO,IAAMA,aAAa,GAAG,CAAC;AAC9B,OAAO,IAAMC,SAAS,GAAG,CAAC,CAAC;AAC3B,OAAO,IAAMC,SAAS,GAAG,CAAC,CAAC;AAE3B,SAASC,UAAUA,CAACC,aAAa,EAAE;EACjC,OAAOA,aAAa,GAAG,CAAC;AAC1B;AAEA,SAASC,SAASA,CAACD,aAAa,EAAE;EAChC,OAAOA,aAAa,KAAKJ,aAAa;AACxC;AAEA,SAASM,qBAAqBA,CAACC,cAAc,EAAEC,cAAc,EAAE;EAC7D,IAAI,CAACL,UAAU,CAACI,cAAc,CAAC,IAAI,CAACJ,UAAU,CAACK,cAAc,CAAC,EAAE,OAAO,CAAC;EACxE,IAAI,CAACL,UAAU,CAACI,cAAc,CAAC,IAAIJ,UAAU,CAACK,cAAc,CAAC,EAAE,OAAO,CAAC;EACvE,IAAIL,UAAU,CAACI,cAAc,CAAC,IAAI,CAACJ,UAAU,CAACK,cAAc,CAAC,EAAE,OAAO,CAAC,CAAC;EACxE,OAAOD,cAAc,GAAGC,cAAc;AACxC;AAEA,SAASC,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACrB,OAAOC,IAAI,CAACC,KAAK,CAAC,CAACJ,CAAC,GAAGC,CAAC,GAAGC,CAAC,IAAI,CAAC,CAAC;AACpC;AAEA,SAASG,OAAOA,CAACC,cAAc,EAAE;EAC/B,IAAI,CAACA,cAAc,CAACC,KAAK,CAACd,UAAU,CAAC,EAAE,OAAOF,SAAS;EACvD,OAAOQ,IAAI,CAAAS,KAAA,SAAAC,kBAAA,CAAIH,cAAc,EAAC;AAChC;AAEA,SAASI,UAAUA,CAACJ,cAAc,EAAE;EAClC,IAAAK,qBAAA,GAAoBL,cAAc,CAACM,KAAK,CAAC,CAAC,CAACC,IAAI,CAACjB,qBAAqB,CAAC;IAAAkB,sBAAA,GAAAC,cAAA,CAAAJ,qBAAA;IAA7DX,CAAC,GAAAc,sBAAA;IAAEb,CAAC,GAAAa,sBAAA;IAAEZ,CAAC,GAAAY,sBAAA;EAChB,OAAOT,OAAO,CAAC,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;AAC3B;;AAEA;AACA,SAASc,eAAeA,CAACC,KAAK,EAAE;EAC9B,IAAI,CAACxB,UAAU,CAACwB,KAAK,CAAC,EAAE,OAAOA,KAAK;EACpC,IAAIA,KAAK,IAAI,EAAE,GAAG,IAAI,EAAE,OAAOA,KAAK;EACpC,OAAOd,IAAI,CAACC,KAAK,CAACa,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACZ,cAAc,EAAE;EACnC,IAAMa,UAAU,GAAGb,cAAc,CAACc,MAAM,CAAC,UAACC,OAAO;IAAA,OAAK,CAAC1B,SAAS,CAAC0B,OAAO,CAAC;EAAA,EAAC;EAC1E,IAAMC,gBAAgB,GAAGhB,cAAc,CAACc,MAAM,CAAC3B,UAAU,CAAC;EAE1D,IAAI0B,UAAU,CAACI,MAAM,KAAK,CAAC,EAAE,OAAOjC,aAAa;EACjD,IAAIgC,gBAAgB,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOpB,IAAI,CAACqB,GAAG,CAAAhB,KAAA,CAARL,IAAI,EAAAM,kBAAA,CAAQU,UAAU,EAAC;EACjE,OAAOhB,IAAI,CAACsB,GAAG,CAAAjB,KAAA,CAARL,IAAI,EAAAM,kBAAA,CAAQa,gBAAgB,EAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,OAAOA,CAACpB,cAAc,EAAEqB,OAAO,EAAE;EAC/C,IAAI,CAACA,OAAO,EAAE;IACZ;AACJ;IACI,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,IAAID,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,QAAQ,EAAE,OAAOrC,aAAa;EAEtE,IAAIgB,cAAc,CAACuB,IAAI,CAAClC,SAAS,CAAC,EAAE,OAAOL,aAAa;EAExD,IAAIqC,OAAO,KAAK,OAAO,EAAE;IACvB,IAAMG,MAAM,GAAGxB,cAAc,CAACyB,GAAG,CAAC,UAACrC,aAAa;MAAA,OAAKA,aAAa,GAAG,GAAG;IAAA,EAAC;IACzE,QAAQY,cAAc,CAACiB,MAAM;MAC3B,KAAK,CAAC;MACN,KAAK,CAAC;QACJ,OAAOjC,aAAa;MACtB,KAAK,CAAC;QACJ,OAAOe,OAAO,CAACyB,MAAM,CAAC;MACxB;QACE,MAAM,IAAIF,KAAK,kEAAAI,MAAA,CACoD1B,cAAc,CAACiB,MAAM,MACxF,CAAC;IACL;EACF;EAEA,QAAQjB,cAAc,CAACiB,MAAM;IAC3B,KAAK,CAAC;MACJ,OAAOP,eAAe,CAACX,OAAO,CAACC,cAAc,CAAC,CAAC;IACjD,KAAK,CAAC;MACJ,OAAOU,eAAe,CAACN,UAAU,CAACJ,cAAc,CAAC,CAAC;IACpD;MACE,MAAM,IAAIsB,KAAK,8DAAAI,MAAA,CACgD1B,cAAc,CAACiB,MAAM,MACpF,CAAC;EACL;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,uBAAuBA,CAAChB,KAAK,EAAE;EAC7C,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO;IAAEiB,MAAM,EAAE,CAAC;IAAEC,SAAS,EAAE,CAAC;IAAEC,YAAY,EAAEnB;EAAM,CAAC;EACvE;EACA;EACA,IAAMoB,gBAAgB,GAAGpB,KAAK,CAACqB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC;EAC3E,IAAIH,gBAAgB,EAAE;IACpB,IAAMI,QAAO,GAAGxB,KAAK,GAAG,GAAG;IAC3B,IAAMkB,UAAS,GAAGhC,IAAI,CAACuC,KAAK,CAACzB,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;IAC/C,IAAMiB,OAAM,GAAG,EAAE,GAAI/B,IAAI,CAACuC,KAAK,CAACzB,KAAK,GAAG,GAAG,CAAC,GAAG,GAAI;IACnD,IAAMmB,aAAY,GAAGK,QAAO,KAAK,KAAK,GAAG,IAAI,GAAGA,QAAO,GAAG,GAAG;IAC7D,OAAO;MAAEP,MAAM,EAANA,OAAM;MAAEC,SAAS,EAATA,UAAS;MAAEC,YAAY,EAAZA;IAAa,CAAC;EAC5C;EACA,IAAMO,MAAM,GAAG1B,KAAK,GAAG,GAAG;EAC1B,IAAMwB,OAAO,GAAGtC,IAAI,CAACuC,KAAK,CAACzB,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;EAC7C,IAAM2B,MAAM,GAAG,EAAE,GAAIzC,IAAI,CAACuC,KAAK,CAACzB,KAAK,GAAG,GAAG,CAAC,GAAG,GAAI;EACnD,IAAMiB,MAAM,GAAGU,MAAM,GAAGD,MAAM;EAC9B,IAAMR,SAAS,GAAGD,MAAM,GAAGS,MAAM;EACjC,IAAMP,YAAY,GAAGK,OAAO,KAAK,KAAK,GAAG,IAAI,GAAGA,OAAO,GAAG,GAAG;EAC7D,OAAO;IAAEP,MAAM,EAANA,MAAM;IAAEC,SAAS,EAATA,SAAS;IAAEC,YAAY,EAAZA;EAAa,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,uBAAuBA,CAAAC,IAAA,EAAsC;EAAA,IAAnCZ,MAAM,GAAAY,IAAA,CAANZ,MAAM;IAAEC,SAAS,GAAAW,IAAA,CAATX,SAAS;IAAEC,YAAY,GAAAU,IAAA,CAAZV,YAAY;EACvE,IAAIA,YAAY,IAAI,CAAC,EAAE,OAAOA,YAAY;EAC1C,IAAMO,MAAM,GAAGR,SAAS,GAAGD,MAAM;EACjC,IAAMU,MAAM,GAAGV,MAAM,GAAGS,MAAM;EAC9B,IAAMF,OAAO,GAAGtC,IAAI,CAACC,KAAK,CACxB,CAACgC,YAAY,IAAI,OAAO,IAAI,GAC9B,CAAC,CAAC,CAAC;EACH,OAAO,CAAC,EAAE,GAAGQ,MAAM,IAAI,GAAG,GAAGH,OAAO,GAAG,GAAG,GAAGE,MAAM;AACrD;;AAEA;AACA;AACA;AACA,OAAO,SAASI,yBAAyBA,CAACX,YAAY,EAAE;EACtD,IAAIA,YAAY,IAAI,IAAI,EAAE;IACxB,OAAO,SAAS;EAClB;EACA,IAAI,CAACY,MAAM,CAACC,QAAQ,CAACb,YAAY,CAAC,EAAE;IAClC,MAAM,IAAIR,KAAK,wDAAAI,MAAA,CAC0CI,YAAY,MACrE,CAAC;EACH;EACA,OAAO,IAAIc,IAAI,CAACd,YAAY,GAAG,EAAE,CAAC,CAC/Be,WAAW,CAAC,CAAC,CACbC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CACdC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;AACjC;AAEA,SAASC,uBAAuBA,CAAC5D,aAAa,EAAE;EAC9C,IAAA6D,qBAAA,GAA4CtB,uBAAuB,CACjEvC,aACF,CAAC;IAFOwC,MAAM,GAAAqB,qBAAA,CAANrB,MAAM;IAAEC,SAAS,GAAAoB,qBAAA,CAATpB,SAAS;IAAEC,YAAY,GAAAmB,qBAAA,CAAZnB,YAAY;EAGvC,IAAMoB,WAAW,GAAGT,yBAAyB,CAACX,YAAY,CAAC;EAC3D,IAAMqB,gBAAgB,GAAGD,WAAW,CAACH,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EACzD;EACA;EACA;EACA;EACA,UAAArB,MAAA,CAAUE,MAAM,OAAAF,MAAA,CAAIG,SAAS,YAAAH,MAAA,CAASyB,gBAAgB;AACxD;AAEA,SAASC,qBAAqBA,CAAChE,aAAa,EAAE;EAC5C;AACF;EACE,IAAMiE,SAAS,GAAGjE,aAAa,IAAI,IAAI;EACvC,OAAOiE,SAAS,GACZ,CAACjE,aAAa,GAAG,GAAG,EAAEkE,OAAO,CAAC,CAAC,CAAC,GAChClE,aAAa,CAAC4C,QAAQ,CAAC,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,mBAAmBA,CAACnE,aAAa,EAAEiC,OAAO,EAAE;EAC1D,IAAIjC,aAAa,KAAKJ,aAAa,EAAE,OAAO,EAAE;EAC9C,IAAII,aAAa,KAAKH,SAAS,EAAE,OAAO,KAAK;EAC7C,IAAIG,aAAa,KAAKF,SAAS,EAAE,OAAO,KAAK;EAC7C,IAAImC,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,QAAQ,EAAE,OAAO2B,uBAAuB,CAAC5D,aAAa,CAAC;EAC/F,IAAIiC,OAAO,KAAK,OAAO,EAAE,OAAO+B,qBAAqB,CAAChE,aAAa,CAAC;EACpE,OAAOqD,yBAAyB,CAACrD,aAAa,CAAC;AACjD;AAEA,OAAO,SAASoE,uBAAuBA,CAACC,MAAM,EAAEpC,OAAO,EAAE;EACvD;EACA,IAAMqC,qBAAqB,GAAGD,MAAM,CAACE,QAAQ,CAAC7C,MAAM,CAAC,UAAC8C,CAAC;IAAA,OAAKA,CAAC,KAAK,CAAC;EAAA,EAAC,CAAC3C,MAAM,KAAK,CAAC;EACjF,OAAOwC,MAAM,CAACE,QAAQ,CAAClC,GAAG,CAAC,UAACV,OAAO,EAAE8C,KAAK,EAAK;IAC7C,IAAMC,UAAU,GAAGP,mBAAmB,CAACxC,OAAO,EAAEM,OAAO,CAAC;IACxD,OAAOqC,qBAAqB,KAAKD,MAAM,CAACM,UAAU,KAAKF,KAAK,IAAIJ,MAAM,CAACO,WAAW,KAAKH,KAAK,CAAC,OAAAnC,MAAA,CACrFoC,UAAU,SAAMA,UAAU;EACpC,CAAC,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}