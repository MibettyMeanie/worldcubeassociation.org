{"ast":null,"code":"export var ChangesSaved = 'saving_started';\nexport var AddEvent = 'ADD_EVENT';\nexport var RemoveEvent = 'REMOVE_EVENT';\nexport var AddRounds = 'ADD_ROUNDS';\nexport var RemoveRounds = 'REMOVE_ROUNDS';\nexport var SetScrambleSetCount = 'SET_SCRAMBLE_SET_COUNT';\nexport var UpdateRoundFormat = 'UPDATE_ROUND_FORMAT';\nexport var UpdateCutoff = 'UPDATE_CUTOFF';\nexport var UpdateTimeLimit = 'UPDATE_TIMELIMIT';\nexport var UpdateAdvancementCondition = 'UPDATE_ADVANCEMENT_CONDITION';\nexport var UpdateQualification = 'UPDATE_QUALIFICATION';\n\n/**\n * Action creator for marking changes as saved\n * @returns {Action}\n */\nexport var changesSaved = function changesSaved() {\n  return {\n    type: ChangesSaved\n  };\n};\n\n/**\n * Action creator for adding event\n * @param {EventId} eventId\n * @returns {Action}\n */\nexport var addEvent = function addEvent(eventId) {\n  return {\n    type: AddEvent,\n    payload: {\n      eventId: eventId\n    }\n  };\n};\n\n/**\n * Action creator for removing event\n * @param {EventId} eventId\n * @returns {Action}\n */\nexport var removeEvent = function removeEvent(eventId) {\n  return {\n    type: RemoveEvent,\n    payload: {\n      eventId: eventId\n    }\n  };\n};\n\n/**\n * create an action to add round\n * @param {EventId} eventId\n * @param {number} roundsToAddCount\n * @returns {Action}\n */\nexport var addRounds = function addRounds(eventId, roundsToAddCount) {\n  return {\n    type: AddRounds,\n    payload: {\n      eventId: eventId,\n      roundsToAddCount: roundsToAddCount\n    }\n  };\n};\n\n/**\n * Action creator for removing rounds\n * @param {EventId} eventId\n * @param {number} roundsToRemoveCount\n * @returns {Action}\n */\nexport var removeRounds = function removeRounds(eventId, roundsToRemoveCount) {\n  return {\n    type: RemoveRounds,\n    payload: {\n      eventId: eventId,\n      roundsToRemoveCount: roundsToRemoveCount\n    }\n  };\n};\n\n/**\n * create an action to set the round format\n * @param {ActivityCode} roundId\n * @param {FormatId} format\n * @returns {Action}\n */\nexport var updateRoundFormat = function updateRoundFormat(roundId, format) {\n  return {\n    type: UpdateRoundFormat,\n    payload: {\n      roundId: roundId,\n      format: format\n    }\n  };\n};\n\n/**\n * create an action to set the scramble set count for the round\n * @param {ActivityCode} roundId\n * @param {number} newScrambleSetCount\n * @returns {Action}\n */\nexport var setScrambleSetCount = function setScrambleSetCount(roundId, scrambleSetCount) {\n  return {\n    type: SetScrambleSetCount,\n    payload: {\n      roundId: roundId,\n      scrambleSetCount: scrambleSetCount\n    }\n  };\n};\n\n/**\n * create an action to set the cutoff for the round\n * @param {ActivityCode} roundId\n * @param {Cutoff} cutoff\n * @returns {Action}\n */\nexport var updateCutoff = function updateCutoff(roundId, cutoff) {\n  return {\n    type: UpdateCutoff,\n    payload: {\n      roundId: roundId,\n      cutoff: cutoff\n    }\n  };\n};\n\n/**\n * create an action to set the time limit for the round\n * @param {ActivityCode} roundId\n * @param {TimeLimit} timeLimit\n * @returns {Action}\n */\nexport var updateTimeLimit = function updateTimeLimit(roundId, timeLimit) {\n  return {\n    type: UpdateTimeLimit,\n    payload: {\n      roundId: roundId,\n      timeLimit: timeLimit\n    }\n  };\n};\nexport var updateAdvancementCondition = function updateAdvancementCondition(roundId, advancementCondition) {\n  return {\n    type: UpdateAdvancementCondition,\n    payload: {\n      roundId: roundId,\n      advancementCondition: advancementCondition\n    }\n  };\n};\nexport var updateQualification = function updateQualification(eventId, qualification) {\n  return {\n    type: UpdateQualification,\n    payload: {\n      eventId: eventId,\n      qualification: qualification\n    }\n  };\n};","map":{"version":3,"names":["ChangesSaved","AddEvent","RemoveEvent","AddRounds","RemoveRounds","SetScrambleSetCount","UpdateRoundFormat","UpdateCutoff","UpdateTimeLimit","UpdateAdvancementCondition","UpdateQualification","changesSaved","type","addEvent","eventId","payload","removeEvent","addRounds","roundsToAddCount","removeRounds","roundsToRemoveCount","updateRoundFormat","roundId","format","setScrambleSetCount","scrambleSetCount","updateCutoff","cutoff","updateTimeLimit","timeLimit","updateAdvancementCondition","advancementCondition","updateQualification","qualification"],"sources":["/app/WcaOnRails/app/webpacker/components/EditEvents/store/actions.js"],"sourcesContent":["export const ChangesSaved = 'saving_started';\nexport const AddEvent = 'ADD_EVENT';\nexport const RemoveEvent = 'REMOVE_EVENT';\nexport const AddRounds = 'ADD_ROUNDS';\nexport const RemoveRounds = 'REMOVE_ROUNDS';\nexport const SetScrambleSetCount = 'SET_SCRAMBLE_SET_COUNT';\nexport const UpdateRoundFormat = 'UPDATE_ROUND_FORMAT';\nexport const UpdateCutoff = 'UPDATE_CUTOFF';\nexport const UpdateTimeLimit = 'UPDATE_TIMELIMIT';\nexport const UpdateAdvancementCondition = 'UPDATE_ADVANCEMENT_CONDITION';\nexport const UpdateQualification = 'UPDATE_QUALIFICATION';\n\n/**\n * Action creator for marking changes as saved\n * @returns {Action}\n */\nexport const changesSaved = () => ({\n  type: ChangesSaved,\n});\n\n/**\n * Action creator for adding event\n * @param {EventId} eventId\n * @returns {Action}\n */\nexport const addEvent = (eventId) => ({\n  type: AddEvent,\n  payload: {\n    eventId,\n  },\n});\n\n/**\n * Action creator for removing event\n * @param {EventId} eventId\n * @returns {Action}\n */\nexport const removeEvent = (eventId) => ({\n  type: RemoveEvent,\n  payload: {\n    eventId,\n  },\n});\n\n/**\n * create an action to add round\n * @param {EventId} eventId\n * @param {number} roundsToAddCount\n * @returns {Action}\n */\nexport const addRounds = (eventId, roundsToAddCount) => ({\n  type: AddRounds,\n  payload: {\n    eventId,\n    roundsToAddCount,\n  },\n});\n\n/**\n * Action creator for removing rounds\n * @param {EventId} eventId\n * @param {number} roundsToRemoveCount\n * @returns {Action}\n */\nexport const removeRounds = (eventId, roundsToRemoveCount) => ({\n  type: RemoveRounds,\n  payload: {\n    eventId,\n    roundsToRemoveCount,\n  },\n});\n\n/**\n * create an action to set the round format\n * @param {ActivityCode} roundId\n * @param {FormatId} format\n * @returns {Action}\n */\nexport const updateRoundFormat = (roundId, format) => ({\n  type: UpdateRoundFormat,\n  payload: {\n    roundId,\n    format,\n  },\n});\n\n/**\n * create an action to set the scramble set count for the round\n * @param {ActivityCode} roundId\n * @param {number} newScrambleSetCount\n * @returns {Action}\n */\nexport const setScrambleSetCount = (roundId, scrambleSetCount) => ({\n  type: SetScrambleSetCount,\n  payload: {\n    roundId,\n    scrambleSetCount,\n  },\n});\n\n/**\n * create an action to set the cutoff for the round\n * @param {ActivityCode} roundId\n * @param {Cutoff} cutoff\n * @returns {Action}\n */\nexport const updateCutoff = (roundId, cutoff) => ({\n  type: UpdateCutoff,\n  payload: {\n    roundId,\n    cutoff,\n  },\n});\n\n/**\n * create an action to set the time limit for the round\n * @param {ActivityCode} roundId\n * @param {TimeLimit} timeLimit\n * @returns {Action}\n */\nexport const updateTimeLimit = (roundId, timeLimit) => ({\n  type: UpdateTimeLimit,\n  payload: {\n    roundId,\n    timeLimit,\n  },\n});\n\nexport const updateAdvancementCondition = (roundId, advancementCondition) => ({\n  type: UpdateAdvancementCondition,\n  payload: {\n    roundId,\n    advancementCondition,\n  },\n});\n\nexport const updateQualification = (eventId, qualification) => ({\n  type: UpdateQualification,\n  payload: {\n    eventId,\n    qualification,\n  },\n});\n"],"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,gBAAgB;AAC5C,OAAO,IAAMC,QAAQ,GAAG,WAAW;AACnC,OAAO,IAAMC,WAAW,GAAG,cAAc;AACzC,OAAO,IAAMC,SAAS,GAAG,YAAY;AACrC,OAAO,IAAMC,YAAY,GAAG,eAAe;AAC3C,OAAO,IAAMC,mBAAmB,GAAG,wBAAwB;AAC3D,OAAO,IAAMC,iBAAiB,GAAG,qBAAqB;AACtD,OAAO,IAAMC,YAAY,GAAG,eAAe;AAC3C,OAAO,IAAMC,eAAe,GAAG,kBAAkB;AACjD,OAAO,IAAMC,0BAA0B,GAAG,8BAA8B;AACxE,OAAO,IAAMC,mBAAmB,GAAG,sBAAsB;;AAEzD;AACA;AACA;AACA;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA;EAAA,OAAU;IACjCC,IAAI,EAAEZ;EACR,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMa,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,OAAO;EAAA,OAAM;IACpCF,IAAI,EAAEX,QAAQ;IACdc,OAAO,EAAE;MACPD,OAAO,EAAPA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAWA,CAAIF,OAAO;EAAA,OAAM;IACvCF,IAAI,EAAEV,WAAW;IACjBa,OAAO,EAAE;MACPD,OAAO,EAAPA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAIH,OAAO,EAAEI,gBAAgB;EAAA,OAAM;IACvDN,IAAI,EAAET,SAAS;IACfY,OAAO,EAAE;MACPD,OAAO,EAAPA,OAAO;MACPI,gBAAgB,EAAhBA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIL,OAAO,EAAEM,mBAAmB;EAAA,OAAM;IAC7DR,IAAI,EAAER,YAAY;IAClBW,OAAO,EAAE;MACPD,OAAO,EAAPA,OAAO;MACPM,mBAAmB,EAAnBA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,OAAO,EAAEC,MAAM;EAAA,OAAM;IACrDX,IAAI,EAAEN,iBAAiB;IACvBS,OAAO,EAAE;MACPO,OAAO,EAAPA,OAAO;MACPC,MAAM,EAANA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIF,OAAO,EAAEG,gBAAgB;EAAA,OAAM;IACjEb,IAAI,EAAEP,mBAAmB;IACzBU,OAAO,EAAE;MACPO,OAAO,EAAPA,OAAO;MACPG,gBAAgB,EAAhBA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIJ,OAAO,EAAEK,MAAM;EAAA,OAAM;IAChDf,IAAI,EAAEL,YAAY;IAClBQ,OAAO,EAAE;MACPO,OAAO,EAAPA,OAAO;MACPK,MAAM,EAANA;IACF;EACF,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIN,OAAO,EAAEO,SAAS;EAAA,OAAM;IACtDjB,IAAI,EAAEJ,eAAe;IACrBO,OAAO,EAAE;MACPO,OAAO,EAAPA,OAAO;MACPO,SAAS,EAATA;IACF;EACF,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0BA,CAAIR,OAAO,EAAES,oBAAoB;EAAA,OAAM;IAC5EnB,IAAI,EAAEH,0BAA0B;IAChCM,OAAO,EAAE;MACPO,OAAO,EAAPA,OAAO;MACPS,oBAAoB,EAApBA;IACF;EACF,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIlB,OAAO,EAAEmB,aAAa;EAAA,OAAM;IAC9DrB,IAAI,EAAEF,mBAAmB;IACzBK,OAAO,EAAE;MACPD,OAAO,EAAPA,OAAO;MACPmB,aAAa,EAAbA;IACF;EACF,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}