{"ast":null,"code":"import { events } from \"../wca-data.js.erb\";\nimport { centisecondsToClockFormat } from \"../wca-live/attempts\";\nexport function pluralize(count, word) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    fixed = _ref.fixed,\n    abbreviate = _ref.abbreviate;\n  var countStr = fixed && count % 1 > 0 ? count.toFixed(fixed) : count;\n  var countDesc = abbreviate ? word[0] : \" \".concat(count === 1 ? word : \"\".concat(word, \"s\"));\n  return countStr + countDesc;\n}\n\n// This is ported from the Ruby code in solve_time.rb.\nfunction parseMbValue(val) {\n  var mbValue = val;\n  var old = Math.floor(mbValue / 1000000000) !== 0;\n  var timeSeconds;\n  var attempted;\n  var solved;\n  if (old) {\n    timeSeconds = mbValue % 100000;\n    mbValue = Math.floor(mbValue / 100000);\n    attempted = mbValue % 100;\n    mbValue = Math.floor(mbValue / 100);\n    solved = 99 - mbValue % 100;\n  } else {\n    var missed = mbValue % 100;\n    mbValue = Math.floor(mbValue / 100);\n    timeSeconds = mbValue % 100000;\n    mbValue = Math.floor(mbValue / 100000);\n    var difference = 99 - mbValue % 100;\n    solved = difference + missed;\n    attempted = solved + missed;\n  }\n  var timeCentiseconds = timeSeconds === 99999 ? null : timeSeconds * 100;\n  return {\n    solved: solved,\n    attempted: attempted,\n    timeCentiseconds: timeCentiseconds\n  };\n}\n\n// This is ported from the Ruby code in solve_time.rb.\nfunction parsedMbToAttemptResult(parsedMb) {\n  var solved = parsedMb.solved,\n    attempted = parsedMb.attempted,\n    timeCentiseconds = parsedMb.timeCentiseconds;\n  var missed = attempted - solved;\n  var mm = missed;\n  var dd = 99 - (solved - missed);\n  var ttttt = Math.floor(timeCentiseconds / 100);\n  return dd * 1e7 + ttttt * 1e2 + mm;\n}\n\n// Ported from SolveTime.multibld_attempt_to_points in solve_time.rb.\n// See https://www.worldcubeassociation.org/regulations/#9f12c\nexport function attemptResultToMbPoints(mbValue) {\n  var _parseMbValue = parseMbValue(mbValue),\n    solved = _parseMbValue.solved,\n    attempted = _parseMbValue.attempted;\n  var missed = attempted - solved;\n  return solved - missed;\n}\n\n// Ported from SolveTime.points_to_multibld_attempt in solve_time.rb.\nexport function mbPointsToAttemptResult(mbPoints) {\n  var solved = mbPoints;\n  var attempted = mbPoints;\n  var timeCentiseconds = 0;\n  return parsedMbToAttemptResult({\n    solved: solved,\n    attempted: attempted,\n    timeCentiseconds: timeCentiseconds\n  });\n}\nexport function mbPointsToAttemptResultWithUnknownTime(mbPoints) {\n  var solved = mbPoints;\n  var attempted = mbPoints;\n  var timeCentiseconds = 99999;\n  return parsedMbToAttemptResult({\n    solved: solved,\n    attempted: attempted,\n    timeCentiseconds: timeCentiseconds\n  });\n}\nexport var SECOND_IN_CS = 100;\nexport var MINUTE_IN_CS = 60 * SECOND_IN_CS;\nexport var HOUR_IN_CS = 60 * MINUTE_IN_CS;\nexport function centisecondsToString(c) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _short = _ref2[\"short\"];\n  var centiseconds = c;\n  var str = '';\n  var hours = centiseconds / HOUR_IN_CS;\n  centiseconds %= HOUR_IN_CS;\n  if (hours >= 1) {\n    str += \"\".concat(pluralize(Math.floor(hours), 'hour', {\n      abbreviate: _short\n    }), \" \");\n  }\n  var minutes = centiseconds / MINUTE_IN_CS;\n  centiseconds %= MINUTE_IN_CS;\n  if (minutes >= 1) {\n    str += \"\".concat(pluralize(Math.floor(minutes), 'minute', {\n      abbreviate: _short\n    }), \" \");\n  }\n  var seconds = centiseconds / SECOND_IN_CS;\n  if (seconds > 0 || str.length === 0) {\n    str += \"\".concat(pluralize(seconds, 'second', {\n      fixed: 2,\n      abbreviate: _short\n    }), \" \");\n  }\n  return str.trim();\n}\nexport function attemptResultToString(attemptResult, eventId) {\n  var event = events.byId[eventId];\n  if (event.isTimedEvent) {\n    return centisecondsToClockFormat(attemptResult);\n  }\n  if (event.isFewestMoves) {\n    return \"\".concat(attemptResult, \" moves\");\n  }\n  if (event.isMultipleBlindfolded) {\n    return \"\".concat(attemptResultToMbPoints(attemptResult), \" points\");\n  }\n  throw new Error(\"Unrecognized event type: \".concat(eventId));\n}\nexport function matchResult(attemptResult, eventId) {\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _short2 = _ref3[\"short\"];\n  var event = events.byId[eventId];\n  var comparisonString = event.isMultipleBlindfolded ? '>' : '<';\n  if (!_short2) {\n    comparisonString = {\n      '<': 'less than',\n      '>': 'greater than'\n    }[comparisonString];\n  }\n  return \"\".concat(comparisonString, \" \").concat(attemptResultToString(attemptResult, eventId, {\n    \"short\": _short2\n  }));\n}","map":{"version":3,"names":["events","centisecondsToClockFormat","pluralize","count","word","_ref","arguments","length","undefined","fixed","abbreviate","countStr","toFixed","countDesc","concat","parseMbValue","val","mbValue","old","Math","floor","timeSeconds","attempted","solved","missed","difference","timeCentiseconds","parsedMbToAttemptResult","parsedMb","mm","dd","ttttt","attemptResultToMbPoints","_parseMbValue","mbPointsToAttemptResult","mbPoints","mbPointsToAttemptResultWithUnknownTime","SECOND_IN_CS","MINUTE_IN_CS","HOUR_IN_CS","centisecondsToString","c","_ref2","short","centiseconds","str","hours","minutes","seconds","trim","attemptResultToString","attemptResult","eventId","event","byId","isTimedEvent","isFewestMoves","isMultipleBlindfolded","Error","matchResult","_ref3","comparisonString"],"sources":["/app/WcaOnRails/app/webpacker/lib/utils/edit-events.js"],"sourcesContent":["import { events } from '../wca-data.js.erb';\nimport { centisecondsToClockFormat } from '../wca-live/attempts';\n\nexport function pluralize(count, word, { fixed, abbreviate } = {}) {\n  const countStr = (fixed && count % 1 > 0) ? count.toFixed(fixed) : count;\n  const countDesc = abbreviate ? word[0] : ` ${count === 1 ? word : `${word}s`}`;\n  return countStr + countDesc;\n}\n\n// This is ported from the Ruby code in solve_time.rb.\nfunction parseMbValue(val) {\n  let mbValue = val;\n  const old = Math.floor(mbValue / 1000000000) !== 0;\n  let timeSeconds; let attempted; let\n    solved;\n  if (old) {\n    timeSeconds = mbValue % 100000;\n    mbValue = Math.floor(mbValue / 100000);\n    attempted = mbValue % 100;\n    mbValue = Math.floor(mbValue / 100);\n    solved = 99 - (mbValue % 100);\n  } else {\n    const missed = mbValue % 100;\n    mbValue = Math.floor(mbValue / 100);\n    timeSeconds = mbValue % 100000;\n    mbValue = Math.floor(mbValue / 100000);\n    const difference = 99 - (mbValue % 100);\n\n    solved = difference + missed;\n    attempted = solved + missed;\n  }\n\n  const timeCentiseconds = timeSeconds === 99999 ? null : timeSeconds * 100;\n  return { solved, attempted, timeCentiseconds };\n}\n\n// This is ported from the Ruby code in solve_time.rb.\nfunction parsedMbToAttemptResult(parsedMb) {\n  const { solved, attempted, timeCentiseconds } = parsedMb;\n  const missed = attempted - solved;\n\n  const mm = missed;\n  const dd = 99 - (solved - missed);\n  const ttttt = Math.floor(timeCentiseconds / 100);\n  return (dd * 1e7 + ttttt * 1e2 + mm);\n}\n\n// Ported from SolveTime.multibld_attempt_to_points in solve_time.rb.\n// See https://www.worldcubeassociation.org/regulations/#9f12c\nexport function attemptResultToMbPoints(mbValue) {\n  const { solved, attempted } = parseMbValue(mbValue);\n  const missed = attempted - solved;\n  return solved - missed;\n}\n\n// Ported from SolveTime.points_to_multibld_attempt in solve_time.rb.\nexport function mbPointsToAttemptResult(mbPoints) {\n  const solved = mbPoints;\n  const attempted = mbPoints;\n  const timeCentiseconds = 0;\n  return parsedMbToAttemptResult({ solved, attempted, timeCentiseconds });\n}\n\nexport function mbPointsToAttemptResultWithUnknownTime(mbPoints) {\n  const solved = mbPoints;\n  const attempted = mbPoints;\n  const timeCentiseconds = 99999;\n  return parsedMbToAttemptResult({ solved, attempted, timeCentiseconds });\n}\n\nexport const SECOND_IN_CS = 100;\nexport const MINUTE_IN_CS = 60 * SECOND_IN_CS;\nexport const HOUR_IN_CS = 60 * MINUTE_IN_CS;\n\nexport function centisecondsToString(c, { short } = {}) {\n  let centiseconds = c;\n  let str = '';\n\n  const hours = centiseconds / HOUR_IN_CS;\n  centiseconds %= HOUR_IN_CS;\n  if (hours >= 1) {\n    str += `${pluralize(Math.floor(hours), 'hour', { abbreviate: short })} `;\n  }\n\n  const minutes = centiseconds / MINUTE_IN_CS;\n  centiseconds %= MINUTE_IN_CS;\n  if (minutes >= 1) {\n    str += `${pluralize(Math.floor(minutes), 'minute', { abbreviate: short })} `;\n  }\n\n  const seconds = centiseconds / SECOND_IN_CS;\n  if (seconds > 0 || str.length === 0) {\n    str += `${pluralize(seconds, 'second', { fixed: 2, abbreviate: short })} `;\n  }\n\n  return str.trim();\n}\n\nexport function attemptResultToString(attemptResult, eventId) {\n  const event = events.byId[eventId];\n  if (event.isTimedEvent) {\n    return centisecondsToClockFormat(attemptResult);\n  } if (event.isFewestMoves) {\n    return `${attemptResult} moves`;\n  } if (event.isMultipleBlindfolded) {\n    return `${attemptResultToMbPoints(attemptResult)} points`;\n  }\n  throw new Error(`Unrecognized event type: ${eventId}`);\n}\n\nexport function matchResult(attemptResult, eventId, { short } = {}) {\n  const event = events.byId[eventId];\n  let comparisonString = event.isMultipleBlindfolded ? '>' : '<';\n  if (!short) {\n    comparisonString = {\n      '<': 'less than',\n      '>': 'greater than',\n    }[comparisonString];\n  }\n  return `${comparisonString} ${attemptResultToString(attemptResult, eventId, { short })}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}