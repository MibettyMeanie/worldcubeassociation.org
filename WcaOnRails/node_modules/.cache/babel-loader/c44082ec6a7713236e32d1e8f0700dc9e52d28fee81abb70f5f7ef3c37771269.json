{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/app/WcaOnRails/app/webpacker/components/EditEvents/Modals/EditAdvancementConditionModal/index.js\";\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport React, { useState } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport useInputState from \"../../../../lib/hooks/useInputState\";\nimport { roundIdToString } from \"../../../../lib/utils/wcif\";\nimport ButtonActivatedModal from \"../ButtonActivatedModal\";\nimport { useDispatch } from \"../../../../lib/providers/StoreProvider\";\nimport { updateAdvancementCondition } from \"../../store/actions\";\nimport AttemptResultField from \"../../../Results/WCALive/AttemptResultField/AttemptResultField\";\nimport { matchResult } from \"../../../../lib/utils/edit-events\";\nimport AdvancementTypeField from \"./AdvancementTypeInput\";\nimport MbldPointsField from \"../../../Results/WCALive/AttemptResultField/MbldPointsField\";\nvar MIN_ADVANCE_PERCENT = 1;\nvar MAX_ADVANCE_PERCENT = 75;\n\n/**\n * Formats an advancement requirement as a string\n * @param {String} advancementCondition\n * @returns\n */\nfunction advanceReqToStrShort(eventId, advancementCondition) {\n  if (!advancementCondition) {\n    return '-';\n  }\n  switch (advancementCondition.type) {\n    case 'ranking':\n      return \"Top \".concat(advancementCondition.level);\n    case 'percent':\n      return \"Top \".concat(advancementCondition.level, \"%\");\n    case 'attemptResult':\n      return matchResult(advancementCondition.level, eventId, {\n        \"short\": true\n      });\n    default:\n      throw new Error(\"Unrecognized advancementCondition type: \".concat(advancementCondition.type));\n  }\n}\n\n/**\n * Formats an advancement requirement as a string\n * @returns {String}\n */\nvar advanceReqToExplanationText = function advanceReqToExplanationText(wcifEvent, roundNumber, _ref) {\n  var type = _ref.type,\n    level = _ref.level;\n  switch (type) {\n    case 'ranking':\n      return \"The top \".concat(level, \" competitors from round \").concat(roundNumber, \" will advance to round \").concat(roundNumber + 1, \".\");\n    case 'percent':\n      return \"The top \".concat(level, \"% competitors from round \").concat(roundNumber, \" will advance to round \").concat(roundNumber + 1, \".\");\n    case 'attemptResult':\n      return \"Everyone in round \".concat(roundNumber, \" with a result \").concat(matchResult(level, wcifEvent.id), \" will advance to round \").concat(roundNumber + 1, \".\");\n    default:\n      return '';\n  }\n};\nfunction AdvancementInput(_ref2) {\n  var eventId = _ref2.eventId,\n    type = _ref2.type,\n    level = _ref2.level,\n    _onChange = _ref2.onChange;\n  switch (type) {\n    case 'ranking':\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, \"Rank\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"number\",\n        min: 1,\n        value: level,\n        onChange: function onChange(e) {\n          return _onChange(parseInt(e.target.value, 10));\n        },\n        label: \"Ranking\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }));\n    case 'percent':\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, \"Percent\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"number\",\n        min: MIN_ADVANCE_PERCENT,\n        max: MAX_ADVANCE_PERCENT,\n        value: level,\n        onChange: function onChange(e) {\n          return _onChange(parseInt(e.target.value, 10));\n        },\n        label: \"Percent\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }));\n    case 'attemptResult':\n      return eventId === '333mbf' ? /*#__PURE__*/React.createElement(MbldPointsField, {\n        label: /*#__PURE__*/React.createElement(Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 24\n          }\n        }, \"Result\"),\n        eventId: eventId,\n        value: level,\n        onChange: _onChange,\n        resultType: \"single\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(AttemptResultField, {\n        label: /*#__PURE__*/React.createElement(Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 24\n          }\n        }, \"Result\"),\n        eventId: eventId,\n        value: level,\n        onChange: _onChange,\n        resultType: \"single\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }\n      });\n    default:\n      return null;\n  }\n}\nvar defaultValueAdvancementValue = function defaultValueAdvancementValue(type) {\n  return type === 'percent' ? 75 : 0;\n};\n\n/**\n * Shows a modal to edit the advancement condition of a round.\n * @param {Event} wcifEvent\n * @param {Round} wcifRound\n * @returns {React.ReactElement}\n */\nexport default function EditAdvancementConditionModal(_ref3) {\n  var _advancementCondition, _advancementCondition2;\n  var wcifEvent = _ref3.wcifEvent,\n    wcifRound = _ref3.wcifRound,\n    roundNumber = _ref3.roundNumber,\n    disabled = _ref3.disabled;\n  var advancementCondition = wcifRound.advancementCondition;\n  var dispatch = useDispatch();\n  var _useInputState = useInputState((_advancementCondition = advancementCondition === null || advancementCondition === void 0 ? void 0 : advancementCondition.type) !== null && _advancementCondition !== void 0 ? _advancementCondition : ''),\n    _useInputState2 = _slicedToArray(_useInputState, 2),\n    type = _useInputState2[0],\n    setType = _useInputState2[1];\n  var _useState = useState((_advancementCondition2 = advancementCondition === null || advancementCondition === void 0 ? void 0 : advancementCondition.level) !== null && _advancementCondition2 !== void 0 ? _advancementCondition2 : defaultValueAdvancementValue(type)),\n    _useState2 = _slicedToArray(_useState, 2),\n    level = _useState2[0],\n    setLevel = _useState2[1];\n  var hasUnsavedChanges = function hasUnsavedChanges() {\n    return !_isEqual(advancementCondition, type ? {\n      type: type,\n      level: level\n    } : null);\n  };\n  var reset = function reset() {\n    var _advancementCondition3, _advancementCondition4;\n    setType((_advancementCondition3 = advancementCondition === null || advancementCondition === void 0 ? void 0 : advancementCondition.type) !== null && _advancementCondition3 !== void 0 ? _advancementCondition3 : '');\n    setLevel((_advancementCondition4 = advancementCondition === null || advancementCondition === void 0 ? void 0 : advancementCondition.level) !== null && _advancementCondition4 !== void 0 ? _advancementCondition4 : 0);\n  };\n  var handleOk = function handleOk() {\n    if (hasUnsavedChanges()) {\n      dispatch(updateAdvancementCondition(wcifRound.id, type ? {\n        type: type,\n        level: level\n      } : null));\n    }\n  };\n  var Title = \"Requirement to advance past \".concat(roundIdToString(wcifRound.id));\n  var Trigger = advanceReqToStrShort(wcifEvent.id, advancementCondition);\n  return /*#__PURE__*/React.createElement(ButtonActivatedModal, {\n    trigger: Trigger,\n    title: Title,\n    reset: reset,\n    onOk: handleOk,\n    hasUnsavedChanges: hasUnsavedChanges(),\n    disabled: disabled,\n    triggerButtonProps: {\n      name: 'advancementCondition'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AdvancementTypeField, {\n    advancementType: type,\n    onChange: setType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }), !!type && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AdvancementInput, {\n    eventId: wcifEvent.id,\n    type: type,\n    level: level,\n    onChange: setLevel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, advanceReqToExplanationText(wcifEvent, roundNumber, {\n    type: type,\n    level: level\n  }))));\n}","map":{"version":3,"names":["React","useState","Label","useInputState","roundIdToString","ButtonActivatedModal","useDispatch","updateAdvancementCondition","AttemptResultField","matchResult","AdvancementTypeField","MbldPointsField","MIN_ADVANCE_PERCENT","MAX_ADVANCE_PERCENT","advanceReqToStrShort","eventId","advancementCondition","type","concat","level","Error","advanceReqToExplanationText","wcifEvent","roundNumber","_ref","id","AdvancementInput","_ref2","onChange","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","min","value","e","parseInt","target","label","max","resultType","defaultValueAdvancementValue","EditAdvancementConditionModal","_ref3","_advancementCondition","_advancementCondition2","wcifRound","disabled","dispatch","_useInputState","_useInputState2","_slicedToArray","setType","_useState","_useState2","setLevel","hasUnsavedChanges","_isEqual","reset","_advancementCondition3","_advancementCondition4","handleOk","Title","Trigger","trigger","title","onOk","triggerButtonProps","name","advancementType"],"sources":["/app/WcaOnRails/app/webpacker/components/EditEvents/Modals/EditAdvancementConditionModal/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Label } from 'semantic-ui-react';\nimport useInputState from '../../../../lib/hooks/useInputState';\nimport { roundIdToString } from '../../../../lib/utils/wcif';\nimport ButtonActivatedModal from '../ButtonActivatedModal';\nimport { useDispatch } from '../../../../lib/providers/StoreProvider';\nimport { updateAdvancementCondition } from '../../store/actions';\nimport AttemptResultField from '../../../Results/WCALive/AttemptResultField/AttemptResultField';\nimport { matchResult } from '../../../../lib/utils/edit-events';\nimport AdvancementTypeField from './AdvancementTypeInput';\nimport MbldPointsField from '../../../Results/WCALive/AttemptResultField/MbldPointsField';\n\nconst MIN_ADVANCE_PERCENT = 1;\nconst MAX_ADVANCE_PERCENT = 75;\n\n/**\n * Formats an advancement requirement as a string\n * @param {String} advancementCondition\n * @returns\n */\nfunction advanceReqToStrShort(eventId, advancementCondition) {\n  if (!advancementCondition) {\n    return '-';\n  }\n\n  switch (advancementCondition.type) {\n    case 'ranking':\n      return `Top ${advancementCondition.level}`;\n    case 'percent':\n      return `Top ${advancementCondition.level}%`;\n    case 'attemptResult':\n      return matchResult(advancementCondition.level, eventId, {\n        short: true,\n      });\n    default:\n      throw new Error(\n        `Unrecognized advancementCondition type: ${advancementCondition.type}`,\n      );\n  }\n}\n\n/**\n * Formats an advancement requirement as a string\n * @returns {String}\n */\nconst advanceReqToExplanationText = (wcifEvent, roundNumber, { type, level }) => {\n  switch (type) {\n    case 'ranking':\n      return `The top ${level} competitors from round ${roundNumber} will advance to round ${roundNumber + 1}.`;\n    case 'percent':\n      return `The top ${level}% competitors from round ${roundNumber} will advance to round ${roundNumber + 1}.`;\n    case 'attemptResult':\n      return `Everyone in round ${roundNumber} with a result ${matchResult(level, wcifEvent.id)\n        } will advance to round ${roundNumber + 1}.`;\n    default:\n      return '';\n  }\n};\n\nfunction AdvancementInput({ eventId, type, level, onChange }) {\n  switch (type) {\n    case 'ranking':\n      return (\n        <>\n          <Label>Rank</Label>\n          <input\n            type=\"number\"\n            min={1}\n            value={level}\n            onChange={(e) => onChange(parseInt(e.target.value, 10))}\n            label=\"Ranking\"\n          />\n        </>\n      );\n    case 'percent':\n      return (\n        <>\n          <Label>Percent</Label>\n          <input\n            type=\"number\"\n            min={MIN_ADVANCE_PERCENT}\n            max={MAX_ADVANCE_PERCENT}\n            value={level}\n            onChange={(e) => onChange(parseInt(e.target.value, 10))}\n            label=\"Percent\"\n          />\n        </>\n      );\n    case 'attemptResult':\n      return (\n        eventId === '333mbf'\n            ? <MbldPointsField\n                label={<Label>Result</Label>}\n                eventId={eventId}\n                value={level}\n                onChange={onChange}\n                resultType=\"single\"\n              />\n            : <AttemptResultField\n                label={<Label>Result</Label>}\n                eventId={eventId}\n                value={level}\n                onChange={onChange}\n                resultType=\"single\"\n              />\n      );\n    default:\n      return null;\n  }\n}\n\nconst defaultValueAdvancementValue = (type) => (type === 'percent' ? 75 : 0);\n\n/**\n * Shows a modal to edit the advancement condition of a round.\n * @param {Event} wcifEvent\n * @param {Round} wcifRound\n * @returns {React.ReactElement}\n */\nexport default function EditAdvancementConditionModal({\n  wcifEvent, wcifRound, roundNumber, disabled,\n}) {\n  const { advancementCondition } = wcifRound;\n  const dispatch = useDispatch();\n\n  const [type, setType] = useInputState(advancementCondition?.type ?? '');\n  const [level, setLevel] = useState(advancementCondition?.level\n    ?? defaultValueAdvancementValue(type));\n\n  const hasUnsavedChanges = () => (\n    !_.isEqual(advancementCondition, type ? { type, level } : null)\n  );\n\n  const reset = () => {\n    setType(advancementCondition?.type ?? '');\n    setLevel(advancementCondition?.level ?? 0);\n  };\n\n  const handleOk = () => {\n    if (hasUnsavedChanges()) {\n      dispatch(updateAdvancementCondition(wcifRound.id, type ? { type, level } : null));\n    }\n  };\n\n  const Title = `Requirement to advance past ${roundIdToString(wcifRound.id)}`;\n  const Trigger = advanceReqToStrShort(wcifEvent.id, advancementCondition);\n\n  return (\n    <ButtonActivatedModal\n      trigger={Trigger}\n      title={Title}\n      reset={reset}\n      onOk={handleOk}\n      hasUnsavedChanges={hasUnsavedChanges()}\n      disabled={disabled}\n      triggerButtonProps={{ name: 'advancementCondition' }}\n    >\n      <AdvancementTypeField\n        advancementType={type}\n        onChange={setType}\n      />\n      {!!type && (\n        <>\n          <AdvancementInput eventId={wcifEvent.id} type={type} level={level} onChange={setLevel} />\n          <br />\n          <p>\n            {advanceReqToExplanationText(wcifEvent, roundNumber, { type, level })}\n          </p>\n        </>\n      )}\n    </ButtonActivatedModal>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}